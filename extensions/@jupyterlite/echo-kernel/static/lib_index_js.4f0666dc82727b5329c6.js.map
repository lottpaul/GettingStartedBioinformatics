{"version":3,"file":"lib_index_js.4f0666dc82727b5329c6.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACmD;AACb;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,2BAA2B,+CAAU;AACrC;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;AC9B0B;AACjD;AACA;AACA;AACO,yBAAyB,2DAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@jupyterlite/echo-kernel/./lib/index.js","webpack://@jupyterlite/echo-kernel/./lib/kernel.js"],"sourcesContent":["// Copyright (c) JupyterLite Contributors\n// Distributed under the terms of the Modified BSD License.\nimport { IKernelSpecs } from '@jupyterlite/kernel';\nimport { EchoKernel } from './kernel';\n/**\n * A plugin to register the echo kernel.\n */\nconst kernel = {\n    id: '@jupyterlite/echo-kernel:kernel',\n    autoStart: true,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        kernelspecs.register({\n            spec: {\n                name: 'echo',\n                display_name: 'Echo',\n                language: 'text',\n                argv: [],\n                resources: {\n                    'logo-32x32': '',\n                    'logo-64x64': ''\n                }\n            },\n            create: async (options) => {\n                return new EchoKernel(options);\n            }\n        });\n    }\n};\nconst plugins = [kernel];\nexport default plugins;\n","import { BaseKernel } from '@jupyterlite/kernel';\n/**\n * A kernel that echos content back.\n */\nexport class EchoKernel extends BaseKernel {\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'Text',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'text/plain'\n                },\n                file_extension: '.txt',\n                mimetype: 'text/plain',\n                name: 'echo',\n                nbconvert_exporter: 'text',\n                pygments_lexer: 'text',\n                version: 'es2017'\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'An echo kernel running in the browser',\n            help_links: [\n                {\n                    text: 'Echo Kernel',\n                    url: 'https://github.com/jupyterlite/echo-kernel'\n                }\n            ]\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const { code } = content;\n        this.publishExecuteResult({\n            execution_count: this.executionCount,\n            data: {\n                'text/plain': code\n            },\n            metadata: {}\n        });\n        return {\n            status: 'ok',\n            execution_count: this.executionCount,\n            user_expressions: {}\n        };\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async completeRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle an `inspect_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async inspectRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle an `is_complete_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async isCompleteRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle a `comm_info_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async commInfoRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `input_reply` message.\n     *\n     * @param content - The content of the reply.\n     */\n    inputReply(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_open` message.\n     *\n     * @param msg - The comm_open message.\n     */\n    async commOpen(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_msg` message.\n     *\n     * @param msg - The comm_msg message.\n     */\n    async commMsg(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_close` message.\n     *\n     * @param close - The comm_close message.\n     */\n    async commClose(msg) {\n        throw new Error('Not implemented');\n    }\n}\n"],"names":[],"sourceRoot":""}